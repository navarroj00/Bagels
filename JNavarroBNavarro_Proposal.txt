FINAL PROJECT PROPOSAL FOR BRANDON NAVARRO AND JORDAN NAVARRO: BAGELS DEDUCTION GAME

1. Project Overview
For our final project, we have decided to write a computer program that emulates Bagels. Bagels is a deduction game in which the player attempts to guess a random three-digit number (with no repeating digits) generated by the program. After each guess, the program will return one of three clues:
	Bagels: None of the three digits guessed is in the correct answer. 
	Pico: One of the three digits guessed is in the correct answer, but the digit guessed is not in the correct place.
	Fermi: One of the three digits guessed is in the correct answer and in the correct place.
	
The program will return the clues in alphabetical order. This is important to note as it means that one cannot assume, for example, that the first digit is in the three-digit guess and in the correct spot while the second digit is in the three-digit guess but not in the correct spot from a response reading "Fermi Pico".
If the player guesses the random three-digit number correctly, the program will output "Correct! Would you like to play again?" and prompt the player to play again. If the player fails to guess the random three-digit number in the allotted amount of guesses, the program will output "You have failed to guess the random three-digit number correctly with your allotted amount of guesses. Would you like to play again?" and prompt the player to play again. 0
The program will need to import the "random" module to function properly.

2. Development Plan
	Standalone Functions:
		getRandomNumber(): Returns a string of random digits that is the number of digits long.
			Required Parameters:
				None.
			Return Values:
				RandomNumber (return RandomNumber).
				
		getClues(): Returns a string that outputs "Bagels", "Pico", and/or "Fermi" clues to the player.
			Required Parameters:
				guess: The string of digits that the player inputs.
				RandomNumber: The string of random digits that is the number of digits long.
			Return Values:
				Bagels: None of the three digits guessed is in the correct answer. (return "Bagels")
				Pico: One of the three digits guessed is in the correct answer, but the digit guessed is not in the correct place. (return "Pico")
				Fermi: One of the three digits guessed in in the correct answer and in the correct place. (return "Fermi")
			
		isDigits(): Returns True if the input parameter string consists of only digits. If it does not, returns False. This checks to see if the player's input is a valid guess.
			Required Parameters:
				number: The string of digits that the player inputs. This is more of a validation of the guess rather than the guess itself.
			Return Values:
				True: If the string consists of only digits, return True.
				False: If the string does not consist of only digits (i.e., letters/special characters), return False.
			
As you can see, there really is not a necessity for classes, unless you would like the random number and the difficulty (amount of guesses) to be stored in one. It would not be any more efficient than an initially explicit declaration of those variables though.
			
3. Bare Minimum Set of Features
	Difficulty Configuration: We will allow the player to decide what difficulty he or she would like to play Bagels on through an input.
		Easy: The input to request this difficulty will be "easy". This will set the amount of guesses to fifteen (15), which is a 1.5x modifier of ten (10).
		Normal: The input to request this difficulty will be "normal". This will set the amount of guesses to ten (10), which is a 1.0x modifier of ten (10).
		Hard: The input to request this difficulty will be "hard". This will set the amount of guesses to seven (7), which is a 0.7x modifier of ten (10).	
		
4. Features to Implement Beyond Bare Minimum
	Digits Configuration: We may allow the player to decide the amount of random digits he or she would like to play Bagels on through an input.
		There would be no parameters to restrain the amount of digits possible, meaning that a player would be able to make Bagels infinitely easier or harder for him or herself, according the digits set.
	
	Graphical Interface: This would not be very easy for us, but it is possible that we could have the program return "Bagels", "Pico", or "Fermi" from separate windows on each guess. We just believe that this would be highly annoying and overall, inefficient to the entire running process.